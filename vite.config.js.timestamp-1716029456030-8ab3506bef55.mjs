// vite.config.js
import path from "node:path";
import { defineConfig } from "file:///Users/pablo_gutierrez/Documents/guardian/interactive-component-library/node_modules/.pnpm/vitest@0.34.1_jsdom@22.1.0_less@4.2.0_sass@1.71.1/node_modules/vitest/dist/config.js";

// package.json
var name = "@guardian/interactive-component-library";

// vite.config.js
import preact from "file:///Users/pablo_gutierrez/Documents/guardian/interactive-component-library/node_modules/.pnpm/@preact+preset-vite@2.8.0_@babel+core@7.22.10_preact@10.12.1_vite@4.5.3/node_modules/@preact/preset-vite/dist/esm/index.mjs";
import peerDepsExternal from "file:///Users/pablo_gutierrez/Documents/guardian/interactive-component-library/node_modules/.pnpm/rollup-plugin-peer-deps-external@2.2.4_rollup@3.29.4/node_modules/rollup-plugin-peer-deps-external/dist/rollup-plugin-peer-deps-external.js";
var __vite_injected_original_dirname = "/Users/pablo_gutierrez/Documents/guardian/interactive-component-library";
var app = async () => {
  var _a;
  const formattedName = ((_a = name.match(/[^/]+$/)) == null ? void 0 : _a[0]) ?? name;
  return defineConfig({
    resolve: {
      alias: {
        $particles: path.resolve(__vite_injected_original_dirname, "src/lib/components/particles"),
        $molecules: path.resolve(__vite_injected_original_dirname, "src/lib/components/molecules"),
        $shared: path.resolve(__vite_injected_original_dirname, "src/lib/shared"),
        $styles: path.resolve(__vite_injected_original_dirname, "src/lib/styles"),
        $storybook: path.resolve(__vite_injected_original_dirname, ".storybook")
      }
    },
    plugins: [peerDepsExternal(), preact({ prefreshEnabled: false })],
    css: {
      preprocessorOptions: {
        scss: {
          additionalData: '@use "sass:map"; @import "./src/lib/styles/generated/mq.scss"; @import "./src/lib/styles/foundation/viewportHeight.scss";'
        }
      },
      postcss: {
        plugins: []
      }
    },
    esbuild: {
      jsx: "automatic",
      jsxFactory: "h",
      jsxFragment: "Fragment"
    },
    build: {
      sourcemap: true,
      minify: false,
      lib: {
        entry: path.resolve(__vite_injected_original_dirname, "src/lib/index.js"),
        name: formattedName
      },
      rollupOptions: {
        output: {
          globals: {
            preact: "preact",
            "preact/jsx-runtime": "preact/jsx-runtime",
            "preact/hooks": "preact/hooks",
            "preact/compat": "preact/compat",
            "preact-transitioning": "preact-transitioning",
            "d3-scale": "d3-scale",
            "d3-geo": "d3-geo"
          }
        }
      }
    },
    test: {
      globals: true,
      environment: "jsdom"
    }
  });
};
var vite_config_default = app;
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
